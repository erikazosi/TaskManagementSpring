/*
 * Category.java
 *
 * Generated with Matisse Schema Definition Language 9.1.10
 * Generation date: Sat Mar 24 15:35:35 2018
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package FothabyCompany.FothabyApp;

import com.matisse.reflect.*;

/**
 * <code>Category</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Category extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.10
     * Generation Date: Sat Mar 24 15:35:35 2018
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Category</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("FothabyCompany.FothabyApp.Category"));

    /**
     * Gets the <code>Category</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Category(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Category(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Category.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Category.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Category.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Category.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'categoryId' */

    /** Attribute <code>categoryId</code> cache ID */
    private static int categoryIdCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("categoryId",CID));

    /**
     * Gets the <code>categoryId</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getCategoryIdAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(categoryIdCID);
    }


    /**
     * Gets the <code>categoryId</code> attribute value.
     * @return the value
     *
     * @see #setCategoryId
     * @see #removeCategoryId
     */
    public final String getCategoryId() {
        return getString(getCategoryIdAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>categoryId</code> attribute value.
     * @param val the new value
     *
     * @see #getCategoryId
     * @see #removeCategoryId
     */
    public final void setCategoryId(String val) {
        setString(getCategoryIdAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>categoryId</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getCategoryId
     * @see #setCategoryId
     */
    public final void removeCategoryId() {
        removeValue(getCategoryIdAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getCategoryId
     * @see #setCategoryId
     */
    public final boolean isCategoryIdDefaultValue() {
        return isDefaultValue(getCategoryIdAttribute(getMtDatabase()));
    }

    /* EntryPoint 'categoryDict' of attribute 'categoryId' */

    /** EntryPointDictionary <code>categoryDict</code> cache ID */
    private static int categoryDictDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("FothabyCompany.FothabyApp.categoryDict"));

    /**
     * Gets the <code>categoryDict</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getCategoryDictDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(categoryDictDictionaryCID);
    }

    /**
     * Finds the <code>Category</code> object where <code>categoryId</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>Category</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static Category lookupCategoryDict(com.matisse.MtDatabase db, String value) {
        return (Category)getCategoryDictDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>Category</code> objects where <code>categoryId</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> categoryDictIterator(com.matisse.MtDatabase db, String value) {
        return getCategoryDictDictionary(db).<E>iterator(value, getClass(db), Category.class);
    }

    /**
     * Creates an iterator on all <code>Category</code> objects where <code>categoryId</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> categoryDictIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getCategoryDictDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, Category.class);
    }


    /* Attribute 'categoryName' */

    /** Attribute <code>categoryName</code> cache ID */
    private static int categoryNameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("categoryName",CID));

    /**
     * Gets the <code>categoryName</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getCategoryNameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(categoryNameCID);
    }


    /**
     * Gets the <code>categoryName</code> attribute value.
     * @return the value
     *
     * @see #setCategoryName
     * @see #removeCategoryName
     */
    public final String getCategoryName() {
        return getString(getCategoryNameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>categoryName</code> attribute value.
     * @param val the new value
     *
     * @see #getCategoryName
     * @see #removeCategoryName
     */
    public final void setCategoryName(String val) {
        setString(getCategoryNameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>categoryName</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getCategoryName
     * @see #setCategoryName
     */
    public final void removeCategoryName() {
        removeValue(getCategoryNameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getCategoryName
     * @see #setCategoryName
     */
    public final boolean isCategoryNameDefaultValue() {
        return isDefaultValue(getCategoryNameAttribute(getMtDatabase()));
    }


    /* Attribute 'medium' */

    /** Attribute <code>medium</code> cache ID */
    private static int mediumCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("medium",CID));

    /**
     * Gets the <code>medium</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getMediumAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(mediumCID);
    }


    /**
     * Gets the <code>medium</code> attribute value.
     * @return the value
     *
     * @see #setMedium
     * @see #removeMedium
     */
    public final String getMedium() {
        return getString(getMediumAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>medium</code> attribute value.
     * @param val the new value
     *
     * @see #getMedium
     * @see #removeMedium
     */
    public final void setMedium(String val) {
        setString(getMediumAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>medium</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getMedium
     * @see #setMedium
     */
    public final void removeMedium() {
        removeValue(getMediumAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getMedium
     * @see #setMedium
     */
    public final boolean isMediumNull() {
        return isNull(getMediumAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getMedium
     * @see #setMedium
     */
    public final boolean isMediumDefaultValue() {
        return isDefaultValue(getMediumAttribute(getMtDatabase()));
    }


    /* Attribute 'materialUsed' */

    /** Attribute <code>materialUsed</code> cache ID */
    private static int materialUsedCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("materialUsed",CID));

    /**
     * Gets the <code>materialUsed</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getMaterialUsedAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(materialUsedCID);
    }


    /**
     * Gets the <code>materialUsed</code> attribute value.
     * @return the value
     *
     * @see #setMaterialUsed
     * @see #removeMaterialUsed
     */
    public final String getMaterialUsed() {
        return getString(getMaterialUsedAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>materialUsed</code> attribute value.
     * @param val the new value
     *
     * @see #getMaterialUsed
     * @see #removeMaterialUsed
     */
    public final void setMaterialUsed(String val) {
        setString(getMaterialUsedAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>materialUsed</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getMaterialUsed
     * @see #setMaterialUsed
     */
    public final void removeMaterialUsed() {
        removeValue(getMaterialUsedAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getMaterialUsed
     * @see #setMaterialUsed
     */
    public final boolean isMaterialUsedNull() {
        return isNull(getMaterialUsedAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getMaterialUsed
     * @see #setMaterialUsed
     */
    public final boolean isMaterialUsedDefaultValue() {
        return isDefaultValue(getMaterialUsedAttribute(getMtDatabase()));
    }


    /* Attribute 'framing' */

    /** Attribute <code>framing</code> cache ID */
    private static int framingCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("framing",CID));

    /**
     * Gets the <code>framing</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getFramingAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(framingCID);
    }


    /**
     * Gets the <code>framing</code> attribute value.
     * @return the value
     *
     * @see #setFraming
     * @see #removeFraming
     */
    public final String getFraming() {
        return getString(getFramingAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>framing</code> attribute value.
     * @param val the new value
     *
     * @see #getFraming
     * @see #removeFraming
     */
    public final void setFraming(String val) {
        setString(getFramingAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>framing</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getFraming
     * @see #setFraming
     */
    public final void removeFraming() {
        removeValue(getFramingAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getFraming
     * @see #setFraming
     */
    public final boolean isFramingNull() {
        return isNull(getFramingAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getFraming
     * @see #setFraming
     */
    public final boolean isFramingDefaultValue() {
        return isDefaultValue(getFramingAttribute(getMtDatabase()));
    }


    /* Attribute 'type' */

    /** Attribute <code>type</code> cache ID */
    private static int typeCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("type",CID));

    /**
     * Gets the <code>type</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getTypeAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(typeCID);
    }


    /**
     * Gets the <code>type</code> attribute value.
     * @return the value
     *
     * @see #setType
     * @see #removeType
     */
    public final String getType() {
        return getString(getTypeAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>type</code> attribute value.
     * @param val the new value
     *
     * @see #getType
     * @see #removeType
     */
    public final void setType(String val) {
        setString(getTypeAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>type</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getType
     * @see #setType
     */
    public final void removeType() {
        removeValue(getTypeAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getType
     * @see #setType
     */
    public final boolean isTypeNull() {
        return isNull(getTypeAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getType
     * @see #setType
     */
    public final boolean isTypeDefaultValue() {
        return isDefaultValue(getTypeAttribute(getMtDatabase()));
    }


    /* Attribute 'dimension' */

    /** Attribute <code>dimension</code> cache ID */
    private static int dimensionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("dimension",CID));

    /**
     * Gets the <code>dimension</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDimensionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(dimensionCID);
    }


    /**
     * Gets the <code>dimension</code> attribute value.
     * @return the value
     *
     * @see #setDimension
     * @see #removeDimension
     */
    public final double getDimension() {
        return getDouble(getDimensionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>dimension</code> attribute value.
     * @param val the new value
     *
     * @see #getDimension
     * @see #removeDimension
     */
    public final void setDimension(double val) {
        setDouble(getDimensionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>dimension</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDimension
     * @see #setDimension
     */
    public final void removeDimension() {
        removeValue(getDimensionAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getDimension
     * @see #setDimension
     */
    public final boolean isDimensionNull() {
        return isNull(getDimensionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDimension
     * @see #setDimension
     */
    public final boolean isDimensionDefaultValue() {
        return isDefaultValue(getDimensionAttribute(getMtDatabase()));
    }


    /* Attribute 'weight' */

    /** Attribute <code>weight</code> cache ID */
    private static int weightCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("weight",CID));

    /**
     * Gets the <code>weight</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getWeightAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(weightCID);
    }


    /**
     * Gets the <code>weight</code> attribute value.
     * @return the value
     *
     * @see #setWeight
     * @see #removeWeight
     */
    public final double getWeight() {
        return getDouble(getWeightAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>weight</code> attribute value.
     * @param val the new value
     *
     * @see #getWeight
     * @see #removeWeight
     */
    public final void setWeight(double val) {
        setDouble(getWeightAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>weight</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getWeight
     * @see #setWeight
     */
    public final void removeWeight() {
        removeValue(getWeightAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getWeight
     * @see #setWeight
     */
    public final boolean isWeightNull() {
        return isNull(getWeightAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getWeight
     * @see #setWeight
     */
    public final boolean isWeightDefaultValue() {
        return isDefaultValue(getWeightAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'contains' */

    /** Relationship <code>contains</code> cache ID */
    private static int containsCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("contains",CID));

    /**
     * Gets the <code>contains</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getContainsRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(containsCID);
    }

    /**
     * Gets the <code>contains</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getContainsSize
     * @see #containsIterator
     */
    public final FothabyCompany.FothabyApp.AuctionItem[] getContains() {
        return (FothabyCompany.FothabyApp.AuctionItem[])getSuccessors(getContainsRelationship(getMtDatabase()), FothabyCompany.FothabyApp.AuctionItem.class);
    }

    /**
     * Counts the <code>contains</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getContains
     * @see #containsIterator
     */
    public final int getContainsSize() {
        return getSuccessorSize(getContainsRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>contains</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getContains
     * @see #getContainsSize
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> containsIterator() {
        return this.<E>successorIterator(getContainsRelationship(getMtDatabase()), FothabyCompany.FothabyApp.AuctionItem.class);
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Category(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Category]";
    }
}
