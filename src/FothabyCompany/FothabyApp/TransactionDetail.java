/*
 * TransactionDetail.java
 *
 * Generated with Matisse Schema Definition Language 9.1.10
 * Generation date: Sat Mar 24 15:35:35 2018
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package FothabyCompany.FothabyApp;

import com.matisse.reflect.*;

/**
 * <code>TransactionDetail</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class TransactionDetail extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.10
     * Generation Date: Sat Mar 24 15:35:35 2018
     */

    /*
     * Class variables and methods
     */

    /** Class <code>TransactionDetail</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("FothabyCompany.FothabyApp.TransactionDetail"));

    /**
     * Gets the <code>TransactionDetail</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public TransactionDetail(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected TransactionDetail(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(TransactionDetail.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, TransactionDetail.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(TransactionDetail.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, TransactionDetail.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'transactionId' */

    /** Attribute <code>transactionId</code> cache ID */
    private static int transactionIdCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("transactionId",CID));

    /**
     * Gets the <code>transactionId</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getTransactionIdAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(transactionIdCID);
    }


    /**
     * Gets the <code>transactionId</code> attribute value.
     * @return the value
     *
     * @see #setTransactionId
     * @see #removeTransactionId
     */
    public final String getTransactionId() {
        return getString(getTransactionIdAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>transactionId</code> attribute value.
     * @param val the new value
     *
     * @see #getTransactionId
     * @see #removeTransactionId
     */
    public final void setTransactionId(String val) {
        setString(getTransactionIdAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>transactionId</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getTransactionId
     * @see #setTransactionId
     */
    public final void removeTransactionId() {
        removeValue(getTransactionIdAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getTransactionId
     * @see #setTransactionId
     */
    public final boolean isTransactionIdDefaultValue() {
        return isDefaultValue(getTransactionIdAttribute(getMtDatabase()));
    }

    /* EntryPoint 'transactionIdDict' of attribute 'transactionId' */

    /** EntryPointDictionary <code>transactionIdDict</code> cache ID */
    private static int transactionIdDictDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("FothabyCompany.FothabyApp.transactionIdDict"));

    /**
     * Gets the <code>transactionIdDict</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getTransactionIdDictDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(transactionIdDictDictionaryCID);
    }

    /**
     * Finds the <code>TransactionDetail</code> object where <code>transactionId</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>TransactionDetail</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static TransactionDetail lookupTransactionIdDict(com.matisse.MtDatabase db, String value) {
        return (TransactionDetail)getTransactionIdDictDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>TransactionDetail</code> objects where <code>transactionId</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> transactionIdDictIterator(com.matisse.MtDatabase db, String value) {
        return getTransactionIdDictDictionary(db).<E>iterator(value, getClass(db), TransactionDetail.class);
    }

    /**
     * Creates an iterator on all <code>TransactionDetail</code> objects where <code>transactionId</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> transactionIdDictIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getTransactionIdDictDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, TransactionDetail.class);
    }


    /* Attribute 'lotNumber' */

    /** Attribute <code>lotNumber</code> cache ID */
    private static int lotNumberCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("lotNumber",CID));

    /**
     * Gets the <code>lotNumber</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getLotNumberAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(lotNumberCID);
    }


    /**
     * Gets the <code>lotNumber</code> attribute value.
     * @return the value
     *
     * @see #setLotNumber
     * @see #removeLotNumber
     */
    public final int getLotNumber() {
        return getInteger(getLotNumberAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>lotNumber</code> attribute value.
     * @param val the new value
     *
     * @see #getLotNumber
     * @see #removeLotNumber
     */
    public final void setLotNumber(int val) {
        setInteger(getLotNumberAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>lotNumber</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getLotNumber
     * @see #setLotNumber
     */
    public final void removeLotNumber() {
        removeValue(getLotNumberAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getLotNumber
     * @see #setLotNumber
     */
    public final boolean isLotNumberDefaultValue() {
        return isDefaultValue(getLotNumberAttribute(getMtDatabase()));
    }


    /* Attribute 'soldDate' */

    /** Attribute <code>soldDate</code> cache ID */
    private static int soldDateCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("soldDate",CID));

    /**
     * Gets the <code>soldDate</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSoldDateAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(soldDateCID);
    }


    /**
     * Gets the <code>soldDate</code> attribute value.
     * @return the value
     *
     * @see #setSoldDate
     * @see #removeSoldDate
     */
    public final java.util.GregorianCalendar getSoldDate() {
        return getTimestamp(getSoldDateAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>soldDate</code> attribute value.
     * @param val the new value
     *
     * @see #getSoldDate
     * @see #removeSoldDate
     */
    public final void setSoldDate(java.util.GregorianCalendar val) {
        setTimestamp(getSoldDateAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>soldDate</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSoldDate
     * @see #setSoldDate
     */
    public final void removeSoldDate() {
        removeValue(getSoldDateAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSoldDate
     * @see #setSoldDate
     */
    public final boolean isSoldDateDefaultValue() {
        return isDefaultValue(getSoldDateAttribute(getMtDatabase()));
    }


    /* Attribute 'buyerDetail' */

    /** Attribute <code>buyerDetail</code> cache ID */
    private static int buyerDetailCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("buyerDetail",CID));

    /**
     * Gets the <code>buyerDetail</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getBuyerDetailAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(buyerDetailCID);
    }


    /**
     * Gets the <code>buyerDetail</code> attribute value.
     * @return the value
     *
     * @see #setBuyerDetail
     * @see #removeBuyerDetail
     */
    public final String getBuyerDetail() {
        return getString(getBuyerDetailAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>buyerDetail</code> attribute value.
     * @param val the new value
     *
     * @see #getBuyerDetail
     * @see #removeBuyerDetail
     */
    public final void setBuyerDetail(String val) {
        setString(getBuyerDetailAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>buyerDetail</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getBuyerDetail
     * @see #setBuyerDetail
     */
    public final void removeBuyerDetail() {
        removeValue(getBuyerDetailAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getBuyerDetail
     * @see #setBuyerDetail
     */
    public final boolean isBuyerDetailDefaultValue() {
        return isDefaultValue(getBuyerDetailAttribute(getMtDatabase()));
    }


    /* Attribute 'sellerDetail' */

    /** Attribute <code>sellerDetail</code> cache ID */
    private static int sellerDetailCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("sellerDetail",CID));

    /**
     * Gets the <code>sellerDetail</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSellerDetailAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(sellerDetailCID);
    }


    /**
     * Gets the <code>sellerDetail</code> attribute value.
     * @return the value
     *
     * @see #setSellerDetail
     * @see #removeSellerDetail
     */
    public final String getSellerDetail() {
        return getString(getSellerDetailAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>sellerDetail</code> attribute value.
     * @param val the new value
     *
     * @see #getSellerDetail
     * @see #removeSellerDetail
     */
    public final void setSellerDetail(String val) {
        setString(getSellerDetailAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>sellerDetail</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSellerDetail
     * @see #setSellerDetail
     */
    public final void removeSellerDetail() {
        removeValue(getSellerDetailAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSellerDetail
     * @see #setSellerDetail
     */
    public final boolean isSellerDetailDefaultValue() {
        return isDefaultValue(getSellerDetailAttribute(getMtDatabase()));
    }


    /* Attribute 'soldPrice' */

    /** Attribute <code>soldPrice</code> cache ID */
    private static int soldPriceCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("soldPrice",CID));

    /**
     * Gets the <code>soldPrice</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSoldPriceAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(soldPriceCID);
    }


    /**
     * Gets the <code>soldPrice</code> attribute value.
     * @return the value
     *
     * @see #setSoldPrice
     * @see #removeSoldPrice
     */
    public final double getSoldPrice() {
        return getDouble(getSoldPriceAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>soldPrice</code> attribute value.
     * @param val the new value
     *
     * @see #getSoldPrice
     * @see #removeSoldPrice
     */
    public final void setSoldPrice(double val) {
        setDouble(getSoldPriceAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>soldPrice</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSoldPrice
     * @see #setSoldPrice
     */
    public final void removeSoldPrice() {
        removeValue(getSoldPriceAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSoldPrice
     * @see #setSoldPrice
     */
    public final boolean isSoldPriceDefaultValue() {
        return isDefaultValue(getSoldPriceAttribute(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public TransactionDetail(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[TransactionDetail]";
    }
}
