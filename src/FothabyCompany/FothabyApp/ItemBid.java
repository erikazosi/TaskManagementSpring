/*
 * ItemBid.java
 *
 * Generated with Matisse Schema Definition Language 9.1.10
 * Generation date: Sat Mar 24 15:35:35 2018
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package FothabyCompany.FothabyApp;

import com.matisse.reflect.*;

/**
 * <code>ItemBid</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class ItemBid extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.10
     * Generation Date: Sat Mar 24 15:35:35 2018
     */

    /*
     * Class variables and methods
     */

    /** Class <code>ItemBid</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("FothabyCompany.FothabyApp.ItemBid"));

    /**
     * Gets the <code>ItemBid</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public ItemBid(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected ItemBid(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(ItemBid.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, ItemBid.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(ItemBid.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, ItemBid.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'bidNumber' */

    /** Attribute <code>bidNumber</code> cache ID */
    private static int bidNumberCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("bidNumber",CID));

    /**
     * Gets the <code>bidNumber</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getBidNumberAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(bidNumberCID);
    }


    /**
     * Gets the <code>bidNumber</code> attribute value.
     * @return the value
     *
     * @see #setBidNumber
     * @see #removeBidNumber
     */
    public final String getBidNumber() {
        return getString(getBidNumberAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>bidNumber</code> attribute value.
     * @param val the new value
     *
     * @see #getBidNumber
     * @see #removeBidNumber
     */
    public final void setBidNumber(String val) {
        setString(getBidNumberAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>bidNumber</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getBidNumber
     * @see #setBidNumber
     */
    public final void removeBidNumber() {
        removeValue(getBidNumberAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getBidNumber
     * @see #setBidNumber
     */
    public final boolean isBidNumberDefaultValue() {
        return isDefaultValue(getBidNumberAttribute(getMtDatabase()));
    }

    /* EntryPoint 'bidNumberDict' of attribute 'bidNumber' */

    /** EntryPointDictionary <code>bidNumberDict</code> cache ID */
    private static int bidNumberDictDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("FothabyCompany.FothabyApp.bidNumberDict"));

    /**
     * Gets the <code>bidNumberDict</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getBidNumberDictDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(bidNumberDictDictionaryCID);
    }

    /**
     * Finds the <code>ItemBid</code> object where <code>bidNumber</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>ItemBid</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static ItemBid lookupBidNumberDict(com.matisse.MtDatabase db, String value) {
        return (ItemBid)getBidNumberDictDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>ItemBid</code> objects where <code>bidNumber</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> bidNumberDictIterator(com.matisse.MtDatabase db, String value) {
        return getBidNumberDictDictionary(db).<E>iterator(value, getClass(db), ItemBid.class);
    }

    /**
     * Creates an iterator on all <code>ItemBid</code> objects where <code>bidNumber</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> bidNumberDictIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getBidNumberDictDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, ItemBid.class);
    }


    /* Attribute 'itemName' */

    /** Attribute <code>itemName</code> cache ID */
    private static int itemNameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("itemName",CID));

    /**
     * Gets the <code>itemName</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getItemNameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(itemNameCID);
    }


    /**
     * Gets the <code>itemName</code> attribute value.
     * @return the value
     *
     * @see #setItemName
     * @see #removeItemName
     */
    public final String getItemName() {
        return getString(getItemNameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>itemName</code> attribute value.
     * @param val the new value
     *
     * @see #getItemName
     * @see #removeItemName
     */
    public final void setItemName(String val) {
        setString(getItemNameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>itemName</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getItemName
     * @see #setItemName
     */
    public final void removeItemName() {
        removeValue(getItemNameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getItemName
     * @see #setItemName
     */
    public final boolean isItemNameDefaultValue() {
        return isDefaultValue(getItemNameAttribute(getMtDatabase()));
    }


    /* Attribute 'lotNumber' */

    /** Attribute <code>lotNumber</code> cache ID */
    private static int lotNumberCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("lotNumber",CID));

    /**
     * Gets the <code>lotNumber</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getLotNumberAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(lotNumberCID);
    }


    /**
     * Gets the <code>lotNumber</code> attribute value.
     * @return the value
     *
     * @see #setLotNumber
     * @see #removeLotNumber
     */
    public final int getLotNumber() {
        return getInteger(getLotNumberAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>lotNumber</code> attribute value.
     * @param val the new value
     *
     * @see #getLotNumber
     * @see #removeLotNumber
     */
    public final void setLotNumber(int val) {
        setInteger(getLotNumberAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>lotNumber</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getLotNumber
     * @see #setLotNumber
     */
    public final void removeLotNumber() {
        removeValue(getLotNumberAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getLotNumber
     * @see #setLotNumber
     */
    public final boolean isLotNumberDefaultValue() {
        return isDefaultValue(getLotNumberAttribute(getMtDatabase()));
    }


    /* Attribute 'participant' */

    /** Attribute <code>participant</code> cache ID */
    private static int participantCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("participant",CID));

    /**
     * Gets the <code>participant</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getParticipantAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(participantCID);
    }


    /**
     * Gets the <code>participant</code> attribute value.
     * @return the value
     *
     * @see #setParticipant
     * @see #removeParticipant
     */
    public final String getParticipant() {
        return getString(getParticipantAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>participant</code> attribute value.
     * @param val the new value
     *
     * @see #getParticipant
     * @see #removeParticipant
     */
    public final void setParticipant(String val) {
        setString(getParticipantAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>participant</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getParticipant
     * @see #setParticipant
     */
    public final void removeParticipant() {
        removeValue(getParticipantAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getParticipant
     * @see #setParticipant
     */
    public final boolean isParticipantDefaultValue() {
        return isDefaultValue(getParticipantAttribute(getMtDatabase()));
    }


    /* Attribute 'biddingPrice' */

    /** Attribute <code>biddingPrice</code> cache ID */
    private static int biddingPriceCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("biddingPrice",CID));

    /**
     * Gets the <code>biddingPrice</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getBiddingPriceAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(biddingPriceCID);
    }


    /**
     * Gets the <code>biddingPrice</code> attribute value.
     * @return the value
     *
     * @see #setBiddingPrice
     * @see #removeBiddingPrice
     */
    public final double getBiddingPrice() {
        return getDouble(getBiddingPriceAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>biddingPrice</code> attribute value.
     * @param val the new value
     *
     * @see #getBiddingPrice
     * @see #removeBiddingPrice
     */
    public final void setBiddingPrice(double val) {
        setDouble(getBiddingPriceAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>biddingPrice</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getBiddingPrice
     * @see #setBiddingPrice
     */
    public final void removeBiddingPrice() {
        removeValue(getBiddingPriceAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getBiddingPrice
     * @see #setBiddingPrice
     */
    public final boolean isBiddingPriceDefaultValue() {
        return isDefaultValue(getBiddingPriceAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'bidFor' */

    /** Relationship <code>bidFor</code> cache ID */
    private static int bidForCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("bidFor",CID));

    /**
     * Gets the <code>bidFor</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getBidForRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(bidForCID);
    }

    /**
     * Gets the <code>bidFor</code> sucessor object.
     * @return an object 
     *
     * @see #setBidFor
     * @see #clearBidFor
     */
    public final FothabyCompany.FothabyApp.AuctionItem getBidFor() {
        return (FothabyCompany.FothabyApp.AuctionItem)getSuccessor(getBidForRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>bidFor</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getBidFor
     * @see #clearBidFor
     */
    public final void setBidFor(FothabyCompany.FothabyApp.AuctionItem succ) {
        setSuccessor(getBidForRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>bidFor</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearBidFor() {
        clearSuccessors(getBidForRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public ItemBid(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[ItemBid]";
    }
}
