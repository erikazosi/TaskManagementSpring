/*
 * AuctionItem.java
 *
 * Generated with Matisse Schema Definition Language 9.1.10
 * Generation date: Sat Mar 24 15:35:35 2018
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package FothabyCompany.FothabyApp;

import com.matisse.reflect.*;

/**
 * <code>AuctionItem</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class AuctionItem extends FothabyCompany.FothabyApp.Category {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.10
     * Generation Date: Sat Mar 24 15:35:35 2018
     */

    /*
     * Class variables and methods
     */

    /** Class <code>AuctionItem</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("FothabyCompany.FothabyApp.AuctionItem"));

    /**
     * Gets the <code>AuctionItem</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public AuctionItem(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected AuctionItem(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(AuctionItem.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, AuctionItem.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(AuctionItem.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, AuctionItem.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'lotNumber' */

    /** Attribute <code>lotNumber</code> cache ID */
    private static int lotNumberCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("lotNumber",CID));

    /**
     * Gets the <code>lotNumber</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getLotNumberAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(lotNumberCID);
    }


    /**
     * Gets the <code>lotNumber</code> attribute value.
     * @return the value
     *
     * @see #setLotNumber
     * @see #removeLotNumber
     */
    public final int getLotNumber() {
        return getInteger(getLotNumberAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>lotNumber</code> attribute value.
     * @param val the new value
     *
     * @see #getLotNumber
     * @see #removeLotNumber
     */
    public final void setLotNumber(int val) {
        setInteger(getLotNumberAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>lotNumber</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getLotNumber
     * @see #setLotNumber
     */
    public final void removeLotNumber() {
        removeValue(getLotNumberAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getLotNumber
     * @see #setLotNumber
     */
    public final boolean isLotNumberDefaultValue() {
        return isDefaultValue(getLotNumberAttribute(getMtDatabase()));
    }


    /* Attribute 'artistName' */

    /** Attribute <code>artistName</code> cache ID */
    private static int artistNameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("artistName",CID));

    /**
     * Gets the <code>artistName</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getArtistNameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(artistNameCID);
    }


    /**
     * Gets the <code>artistName</code> attribute value.
     * @return the value
     *
     * @see #setArtistName
     * @see #removeArtistName
     */
    public final String getArtistName() {
        return getString(getArtistNameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>artistName</code> attribute value.
     * @param val the new value
     *
     * @see #getArtistName
     * @see #removeArtistName
     */
    public final void setArtistName(String val) {
        setString(getArtistNameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>artistName</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getArtistName
     * @see #setArtistName
     */
    public final void removeArtistName() {
        removeValue(getArtistNameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getArtistName
     * @see #setArtistName
     */
    public final boolean isArtistNameDefaultValue() {
        return isDefaultValue(getArtistNameAttribute(getMtDatabase()));
    }


    /* Attribute 'classification' */

    /** Attribute <code>classification</code> cache ID */
    private static int classificationCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("classification",CID));

    /**
     * Gets the <code>classification</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getClassificationAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(classificationCID);
    }


    /**
     * Gets the <code>classification</code> attribute value.
     * @return the value
     *
     * @see #setClassification
     * @see #removeClassification
     */
    public final String getClassification() {
        return getString(getClassificationAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>classification</code> attribute value.
     * @param val the new value
     *
     * @see #getClassification
     * @see #removeClassification
     */
    public final void setClassification(String val) {
        setString(getClassificationAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>classification</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getClassification
     * @see #setClassification
     */
    public final void removeClassification() {
        removeValue(getClassificationAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getClassification
     * @see #setClassification
     */
    public final boolean isClassificationDefaultValue() {
        return isDefaultValue(getClassificationAttribute(getMtDatabase()));
    }


    /* Attribute 'description' */

    /** Attribute <code>description</code> cache ID */
    private static int descriptionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("description",CID));

    /**
     * Gets the <code>description</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDescriptionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(descriptionCID);
    }


    /**
     * Gets the <code>description</code> attribute value.
     * @return the value
     *
     * @see #setDescription
     * @see #removeDescription
     */
    public final String getDescription() {
        return getString(getDescriptionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>description</code> attribute value.
     * @param val the new value
     *
     * @see #getDescription
     * @see #removeDescription
     */
    public final void setDescription(String val) {
        setString(getDescriptionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>description</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDescription
     * @see #setDescription
     */
    public final void removeDescription() {
        removeValue(getDescriptionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDescription
     * @see #setDescription
     */
    public final boolean isDescriptionDefaultValue() {
        return isDefaultValue(getDescriptionAttribute(getMtDatabase()));
    }


    /* Attribute 'auctionCreatedDate' */

    /** Attribute <code>auctionCreatedDate</code> cache ID */
    private static int auctionCreatedDateCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("auctionCreatedDate",CID));

    /**
     * Gets the <code>auctionCreatedDate</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAuctionCreatedDateAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(auctionCreatedDateCID);
    }


    /**
     * Gets the <code>auctionCreatedDate</code> attribute value.
     * @return the value
     *
     * @see #setAuctionCreatedDate
     * @see #removeAuctionCreatedDate
     */
    public final java.util.GregorianCalendar getAuctionCreatedDate() {
        return getTimestamp(getAuctionCreatedDateAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>auctionCreatedDate</code> attribute value.
     * @param val the new value
     *
     * @see #getAuctionCreatedDate
     * @see #removeAuctionCreatedDate
     */
    public final void setAuctionCreatedDate(java.util.GregorianCalendar val) {
        setTimestamp(getAuctionCreatedDateAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>auctionCreatedDate</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAuctionCreatedDate
     * @see #setAuctionCreatedDate
     */
    public final void removeAuctionCreatedDate() {
        removeValue(getAuctionCreatedDateAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAuctionCreatedDate
     * @see #setAuctionCreatedDate
     */
    public final boolean isAuctionCreatedDateDefaultValue() {
        return isDefaultValue(getAuctionCreatedDateAttribute(getMtDatabase()));
    }


    /* Attribute 'itemProducedDate' */

    /** Attribute <code>itemProducedDate</code> cache ID */
    private static int itemProducedDateCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("itemProducedDate",CID));

    /**
     * Gets the <code>itemProducedDate</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getItemProducedDateAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(itemProducedDateCID);
    }


    /**
     * Gets the <code>itemProducedDate</code> attribute value.
     * @return the value
     *
     * @see #setItemProducedDate
     * @see #removeItemProducedDate
     */
    public final java.util.GregorianCalendar getItemProducedDate() {
        return getTimestamp(getItemProducedDateAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>itemProducedDate</code> attribute value.
     * @param val the new value
     *
     * @see #getItemProducedDate
     * @see #removeItemProducedDate
     */
    public final void setItemProducedDate(java.util.GregorianCalendar val) {
        setTimestamp(getItemProducedDateAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>itemProducedDate</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getItemProducedDate
     * @see #setItemProducedDate
     */
    public final void removeItemProducedDate() {
        removeValue(getItemProducedDateAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getItemProducedDate
     * @see #setItemProducedDate
     */
    public final boolean isItemProducedDateDefaultValue() {
        return isDefaultValue(getItemProducedDateAttribute(getMtDatabase()));
    }


    /* Attribute 'estimatedPrice' */

    /** Attribute <code>estimatedPrice</code> cache ID */
    private static int estimatedPriceCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("estimatedPrice",CID));

    /**
     * Gets the <code>estimatedPrice</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getEstimatedPriceAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(estimatedPriceCID);
    }


    /**
     * Gets the <code>estimatedPrice</code> attribute value.
     * @return the value
     *
     * @see #setEstimatedPrice
     * @see #removeEstimatedPrice
     */
    public final double getEstimatedPrice() {
        return getDouble(getEstimatedPriceAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>estimatedPrice</code> attribute value.
     * @param val the new value
     *
     * @see #getEstimatedPrice
     * @see #removeEstimatedPrice
     */
    public final void setEstimatedPrice(double val) {
        setDouble(getEstimatedPriceAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>estimatedPrice</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getEstimatedPrice
     * @see #setEstimatedPrice
     */
    public final void removeEstimatedPrice() {
        removeValue(getEstimatedPriceAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getEstimatedPrice
     * @see #setEstimatedPrice
     */
    public final boolean isEstimatedPriceDefaultValue() {
        return isDefaultValue(getEstimatedPriceAttribute(getMtDatabase()));
    }


    /* Attribute 'itemImage' */

    /** Attribute <code>itemImage</code> cache ID */
    private static int itemImageCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("itemImage",CID));

    /**
     * Gets the <code>itemImage</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getItemImageAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(itemImageCID);
    }


    /**
     * Gets the <code>itemImage</code> attribute value.
     * @return the value
     *
     * @see #setItemImage
     * @see #removeItemImage
     */
    public final byte[] getItemImage() {
        return getImage(getItemImageAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>itemImage</code> attribute value.
     * @param val the new value
     *
     * @see #getItemImage
     * @see #removeItemImage
     */
    public final void setItemImage(byte[] val) {
        setImage(getItemImageAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>itemImage</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getItemImage
     * @see #setItemImage
     */
    public final void removeItemImage() {
        removeValue(getItemImageAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getItemImage
     * @see #setItemImage
     */
    public final boolean isItemImageDefaultValue() {
        return isDefaultValue(getItemImageAttribute(getMtDatabase()));
    }

    /**
     * Gets the <code>itemImage</code> attribute list size.
     * @return the number of elements in the list
     *
     * @see #setItemImageElements
     * @see #getItemImageElements
     */
    public final long getItemImageSize() {
        return getListSize(getItemImageAttribute(getMtDatabase()));
    }

    /**
     * Reads <code>itemImage</code> attribute value elements into a portion of an array.
     * @param value destination buffer
     * @param offset offset at which to start storing elements
     * @param len the maximum number of elements to read
     * @return the number of elements read
     *
     * @see #setItemImageElements
     * @see #getItemImageSize
     */
    public final int getItemImageElements(byte[] value, long offset, int len) {
        return getImageElements(getItemImageAttribute(getMtDatabase()), value, len, offset);
    }

    /**
     * Writes a portion of an array of elements to the <code>itemImage</code> attribute value.
     * @param value an array of elements
     * @param offset offset from which to start writing characters
     * @param len number of characters to write
     * @param discardAfter truncate the remaining part of the attribute
     *
     * @see #getItemImageElements
     * @see #getItemImageSize
     */
    public final void setItemImageElements(byte[] value, long offset, int len, boolean discardAfter) {
        setImageElements(getItemImageAttribute(getMtDatabase()), value, len, offset, discardAfter);
    }


    /* Attribute 'productOwner' */

    /** Attribute <code>productOwner</code> cache ID */
    private static int productOwnerCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("productOwner",CID));

    /**
     * Gets the <code>productOwner</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getProductOwnerAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(productOwnerCID);
    }


    /**
     * Gets the <code>productOwner</code> attribute value.
     * @return the value
     *
     * @see #setProductOwner
     * @see #removeProductOwner
     */
    public final String getProductOwner() {
        return getString(getProductOwnerAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>productOwner</code> attribute value.
     * @param val the new value
     *
     * @see #getProductOwner
     * @see #removeProductOwner
     */
    public final void setProductOwner(String val) {
        setString(getProductOwnerAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>productOwner</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getProductOwner
     * @see #setProductOwner
     */
    public final void removeProductOwner() {
        removeValue(getProductOwnerAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getProductOwner
     * @see #setProductOwner
     */
    public final boolean isProductOwnerDefaultValue() {
        return isDefaultValue(getProductOwnerAttribute(getMtDatabase()));
    }


    /* Attribute 'status' */

    /** Attribute <code>status</code> cache ID */
    private static int statusCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("status",CID));

    /**
     * Gets the <code>status</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getStatusAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(statusCID);
    }


    /**
     * Gets the <code>status</code> attribute value.
     * @return the value
     *
     * @see #setStatus
     * @see #removeStatus
     */
    public final String getStatus() {
        return getString(getStatusAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>status</code> attribute value.
     * @param val the new value
     *
     * @see #getStatus
     * @see #removeStatus
     */
    public final void setStatus(String val) {
        setString(getStatusAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>status</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getStatus
     * @see #setStatus
     */
    public final void removeStatus() {
        removeValue(getStatusAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getStatus
     * @see #setStatus
     */
    public final boolean isStatusDefaultValue() {
        return isDefaultValue(getStatusAttribute(getMtDatabase()));
    }


    /* Attribute 'createdBy' */

    /** Attribute <code>createdBy</code> cache ID */
    private static int createdByCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("createdBy",CID));

    /**
     * Gets the <code>createdBy</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getCreatedByAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(createdByCID);
    }


    /**
     * Gets the <code>createdBy</code> attribute value.
     * @return the value
     *
     * @see #setCreatedBy
     * @see #removeCreatedBy
     */
    public final java.util.GregorianCalendar getCreatedBy() {
        return getTimestamp(getCreatedByAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>createdBy</code> attribute value.
     * @param val the new value
     *
     * @see #getCreatedBy
     * @see #removeCreatedBy
     */
    public final void setCreatedBy(java.util.GregorianCalendar val) {
        setTimestamp(getCreatedByAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>createdBy</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getCreatedBy
     * @see #setCreatedBy
     */
    public final void removeCreatedBy() {
        removeValue(getCreatedByAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getCreatedBy
     * @see #setCreatedBy
     */
    public final boolean isCreatedByDefaultValue() {
        return isDefaultValue(getCreatedByAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'bidDetail' */

    /** Relationship <code>bidDetail</code> cache ID */
    private static int bidDetailCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("bidDetail",CID));

    /**
     * Gets the <code>bidDetail</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getBidDetailRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(bidDetailCID);
    }

    /**
     * Gets the <code>bidDetail</code> sucessor object.
     * @return an object 
     *
     * @see #setBidDetail
     * @see #clearBidDetail
     */
    public final FothabyCompany.FothabyApp.ItemBid getBidDetail() {
        return (FothabyCompany.FothabyApp.ItemBid)getSuccessor(getBidDetailRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>bidDetail</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getBidDetail
     * @see #clearBidDetail
     */
    public final void setBidDetail(FothabyCompany.FothabyApp.ItemBid succ) {
        setSuccessor(getBidDetailRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>bidDetail</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearBidDetail() {
        clearSuccessors(getBidDetailRelationship(getMtDatabase()));
    }


    /* Relationship 'liesUnder' */

    /** Relationship <code>liesUnder</code> cache ID */
    private static int liesUnderCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("liesUnder",CID));

    /**
     * Gets the <code>liesUnder</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getLiesUnderRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(liesUnderCID);
    }

    /**
     * Gets the <code>liesUnder</code> sucessor object.
     * @return an object 
     *
     * @see #setLiesUnder
     * @see #clearLiesUnder
     */
    public final FothabyCompany.FothabyApp.Category getLiesUnder() {
        return (FothabyCompany.FothabyApp.Category)getSuccessor(getLiesUnderRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>liesUnder</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getLiesUnder
     * @see #clearLiesUnder
     */
    public final void setLiesUnder(FothabyCompany.FothabyApp.Category succ) {
        setSuccessor(getLiesUnderRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>liesUnder</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearLiesUnder() {
        clearSuccessors(getLiesUnderRelationship(getMtDatabase()));
    }


    /*
     * Index access methods
     */

    /* Index 'AuctionItemFind' */

    /** Index <code>AuctionItemFind</code> cache ID */
    private static int auctionItemFindIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("FothabyCompany.FothabyApp.AuctionItemFind"));

    /**
     * Gets the <code>AuctionItemFind</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getAuctionItemFindIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(auctionItemFindIndexCID);
    }

    /**
     * Finds one <code>AuctionItem</code> object in index <code>AuctionItemFind</code>.
     * @param db a database
     * @param lotNumber search parameter
     * @return the matching <code>AuctionItem</code> object or <code>null</code> if none was found
     */
    public static AuctionItem lookupAuctionItemFind(com.matisse.MtDatabase db, int lotNumber) {
        return (AuctionItem)getAuctionItemFindIndex(db).lookup(new Object[] {new Integer(lotNumber)}, getClass(db));
    }

    /**
     * Finds <code>AuctionItem</code> objects in index <code>AuctionItemFind</code>.
     * @param db a database
     * @param lotNumber search parameter
     * @return the matching <code>AuctionItem</code> objects or an empty array if none was found
     */
    public static AuctionItem[] lookupObjectsAuctionItemFind(com.matisse.MtDatabase db, int lotNumber) {
        return (AuctionItem[])getAuctionItemFindIndex(db).lookupObjects(new Object[] {new Integer(lotNumber)}, getClass(db), AuctionItem.class);
    }

    /**
     * Opens an iterator on index <code>AuctionItemFind</code> for class <code>AuctionItem</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromLotNumber search parameter
     * @param toLotNumber search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> auctionItemFindIterator(com.matisse.MtDatabase db, int fromLotNumber, int toLotNumber) {
        return getAuctionItemFindIndex(db).<E>iterator(new Object[] {new Integer(fromLotNumber)}, new Object[] {new Integer(toLotNumber)}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, AuctionItem.class);
    }

    /**
     * Opens an iterator on index <code>AuctionItemFind</code> for class <code>AuctionItem</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromLotNumber search parameter
     * @param toLotNumber search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> auctionItemFindIterator(com.matisse.MtDatabase db, int fromLotNumber, int toLotNumber, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getAuctionItemFindIndex(db).iterator(new Object[] {new Integer(fromLotNumber)}, new Object[] {new Integer(toLotNumber)}, filterClass, direction, numObjPerBuffer, AuctionItem.class);
    }

    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public AuctionItem(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[AuctionItem]";
    }
}
